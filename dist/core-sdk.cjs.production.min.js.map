{"version":3,"file":"core-sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Glmr.ts","../src/entities/Native/Moonbase.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/router.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\n  MOONBEAM_TESTNET = 1287,\n  MOONBEAM = 1284,\n}\n","export enum ChainKey {\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\n  MOONBEAM = 'moonbeam',\n}\n","export enum Rounding {\n  ROUND_DOWN = 0,\n  ROUND_HALF_UP = 1,\n  ROUND_UP = 3,\n}\n","export enum SolidityType {\n    uint8 = 'uint8',\n    uint256 = 'uint256',\n}","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n","export enum TradeVersion {\n  V2TRADE,\n  V3TRADE,\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM]: '0xEb813611a8B5E2f8559F1A156c20904426de1147',\n  [ChainId.MOONBEAM_TESTNET]: '0x9f6e0E615585a8248dE15362393565415E71DE3D',\n\n}\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\n  [ChainId.MOONBEAM_TESTNET]: '0xC53ca2e8A0d26bd498D38064e40bB7F712180a9B',\n\n}\n\nexport const USD_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM]: USDC_ADDRESS[ChainId.MOONBEAM],\n  [ChainId.MOONBEAM_TESTNET]: USDC_ADDRESS[ChainId.MOONBEAM_TESTNET],\n\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F',\n  [ChainId.MOONBEAM_TESTNET]: '0xA5fd1F6e7980Fd5cA9d062a762030D449990BBBf',\n\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  \n  [ChainId.MOONBEAM_TESTNET]: WETH9_ADDRESS[ChainId.MOONBEAM_TESTNET],\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F',\n}\n\nexport const DAI_ADDRESS: AddressMap = {\n\n  [ChainId.MOONBEAM]: '0x765277EebeCA2e31912C9946eAe1021199B39C61',\n  [ChainId.MOONBEAM_TESTNET]: '0xE55f16d23Cc8B1813ae44093a555AFa498bb8dfe',\n\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\n  [ChainId.MOONBEAM_TESTNET]: '0x05Bf07102EfEbb83Ba5F475fB18F843E8736B6E8',\n\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  \n  [ChainId.MOONBEAM_TESTNET]: '0xF6899c78240F9055F6a896D63Df4dBfbbAa4eace',\n  [ChainId.MOONBEAM]: '0x7c7EaEa389d958BB37a3fd08706Ca884D53Dc1F3',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n \n  [ChainId.MOONBEAM_TESTNET]: '0x46ab221AC1e51968F4C05E57137011c27696d137',\n  [ChainId.MOONBEAM]: '0xb77EF0475910d1B25FB9e66E3021be63270071C5',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM_TESTNET]: '0xBA571227fEA63965bFab3bDb3f4cA45f6882E57e',\n  [ChainId.MOONBEAM]: '0xc01EA20752b35f2105D07eE3eed580a117cAABD4',\n\n\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  // [ChainId.MOONBEAM_TESTNET]: '0x61DfFD673B37F80AD6707a0C6EB39b57bf5dC97B',\n\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  // [ChainId.MOONBEAM_TESTNET]: '0x1B3BeC53e38506015ca136a725C3bbd185E1333E',\n\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  // [ChainId.MOONBEAM_TESTNET]: '0xa33B55d80D91B9763F81C1C699756806A6b068e3',\n\n}\n\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM]: '0x1Dd9D4f939e975414Ce15F1783ca39164d13C523',\n  [ChainId.MOONBEAM_TESTNET]: '0x9E7E919AaA39eb92280fd539b093EE67d365e4e6',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MOONBEAM]: '0x3B3f8c287181EF3F03ef3318Cf40063652f58679',\n  [ChainId.MOONBEAM_TESTNET]:\"0xD91EB014D129f6fd903c1C3c02E2637d1f87584B\"\n}\n\n","import { ChainId } from '../enums'\nimport { ChainKey } from '../enums'\n\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\n \n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\n  [ChainId.MOONBEAM]: ChainKey.MOONBEAM,\n}\n","import { ChainId } from '../enums/ChainId'\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MOONBEAM_TESTNET]: '0x63b34ef62996dbb5d4710d546f9b2612c77544b2dc001ebecd5287378d17a904',\n  [ChainId.MOONBEAM]: '0x75fd3fc472ee1f8f5b540db733acc7e6fae937af57ce0ae705ad2ec072759acd',\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: number\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n\n  /**\n   * Return logo\n   */\n  // public get logo(): string | null {\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\n  // }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { ChainTokenMap, TokenMap } from '../types'\nimport { SUSHI_ADDRESS, USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\n\nexport const USDC: TokenMap = {\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, USDC_ADDRESS[ChainId.MOONBEAM], 6, 'USDC', 'USD Coin'),\n  [ChainId.MOONBEAM_TESTNET]: new Token(ChainId.MOONBEAM_TESTNET, USDC_ADDRESS[ChainId.MOONBEAM_TESTNET], 6, 'USDC', 'USD Coin'),\n\n}\n\n\nexport const WETH9: TokenMap = {\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WETH9_ADDRESS[ChainId.MOONBEAM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MOONBEAM_TESTNET] : new Token(ChainId.MOONBEAM_TESTNET,WETH9_ADDRESS[ChainId.MOONBEAM_TESTNET],18,\"WETH\",\"Wrapped Ether\")\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MOONBEAM_TESTNET]: WETH9[ChainId.MOONBEAM_TESTNET],\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WNATIVE_ADDRESS[ChainId.MOONBEAM], 18, 'WGLMR', 'Wrapped Glimmer'),\n}\n\nexport const SUSHI: ChainTokenMap = {\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, SUSHI_ADDRESS[ChainId.MOONBEAM], 18, 'EFT', 'Energyfi Token'),\n  [ChainId.MOONBEAM_TESTNET]: new Token(ChainId.MOONBEAM_TESTNET, SUSHI_ADDRESS[ChainId.MOONBEAM_TESTNET], 18, 'EFT', 'EnergyFiToken'),\n\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Glmr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'GLMR', 'Glimmer')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Glmr } = {}\n\n  public static onChain(chainId: number): Glmr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glmr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Moonbase extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'DEV', 'Moonbase')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Moonbase } = {}\n\n  public static onChain(chainId: number): Moonbase {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Moonbase(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Glmr,\n  Moonbase\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\nimport { NativeMap } from '../types'\n\nexport const NATIVE: NativeMap = {\n  [ChainId.MOONBEAM_TESTNET]: Moonbase.onChain(ChainId.MOONBEAM_TESTNET),\n  [ChainId.MOONBEAM]: Glmr.onChain(ChainId.MOONBEAM),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\nimport { SolidityType } from \"../enums/SolidityType\";\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n\n  /**\n   * Returns a string representation of the address and currency amount.\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\n   */\n  public serialize(): string {\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities/Token'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { ONE, TWO, ZERO } from '../constants/numbers'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n\n/**\n * Returns the smallest member of the array\n * @param values the values from which the smallest gets returned\n * @returns the smallest memmber of the array\n */\nexport function minimum(...values: JSBI[]): JSBI {\n  let lowest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.LT(value, lowest)) {\n      lowest = value\n    }\n  }\n  return lowest\n}\n\n/**\n * Returns the biggest member of the array\n * @param values the values from which the biggest gets returned\n * @returns the biggest memmber of the array\n */\nexport function maximum(...values: JSBI[]): JSBI {\n  let highest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.GT(value, highest)) {\n      highest = value\n    }\n  }\n  return highest\n}\n\nexport function difference(a: JSBI, b: JSBI): JSBI {\n  if (JSBI.greaterThan(a, b)) {\n    return JSBI.subtract(a, b)\n  }\n  return JSBI.subtract(b, a)\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/math'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n\n      console.log({\n        amount0: amount0.toString(),\n        amount1: amount1.toString(),\n        liquidity: liquidity.toString(),\n        totalSupply: totalSupply.quotient.toString(),\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\n      })\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums/TradeType'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ONE, ZERO } from '../constants'\nimport { Rebase } from '../interfaces'\n\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\n}\n\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\n  let elastic: JSBI\n  if (JSBI.equal(total.base, ZERO)) {\n    elastic = base\n  } else {\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\n      elastic = JSBI.add(elastic, ONE)\n    }\n  }\n\n  return elastic\n}\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\nimport { SolidityType } from '../enums'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","MOONBEAM","MOONBEAM_TESTNET","USDC_ADDRESS","USD_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","DAI_ADDRESS","USDT_ADDRESS","FACTORY_ADDRESS","ROUTER_ADDRESS","BAR_ADDRESS","BENTOBOX_ADDRESS","MINICHEF_ADDRESS","MULTICALL2_ADDRESS","CHAIN_KEY","INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","Token","equals","other","isToken","this","sortsBefore","toLowerCase","USDC","WETH9","WNATIVE","SUSHI","Glmr","_NativeCurrency","onChain","_cache","isNative","wnative","Moonbase","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","i","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","currencyA","currencyB","highest","arguments","GT","lowest","LT","from","total","base","roundUp","elastic","solidityType"],"mappings":"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"}